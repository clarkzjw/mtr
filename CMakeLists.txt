
cmake_minimum_required(VERSION 3.12)
project(mtr085 C)
set(NAME "mtr")
set(PACKAGE_NAME "${NAME}")
set(VERSION "0.85")

if(EXISTS .git)
  find_package(Git)
  if(GIT_EXECUTABLE)
    execute_process(
      COMMAND ${GIT_EXECUTABLE} rev-list --count 97af563..HEAD
      OUTPUT_STRIP_TRAILING_WHITESPACE
      RESULT_VARIABLE ERROR_CODE
      OUTPUT_VARIABLE GITREV
    )
  endif()
endif()

#set(CMAKE_C_STANDARD 23) # compat test
include(GNUInstallDirs)
include(CheckIncludeFile)
include(CheckFunctionExists)
include(CheckLibraryExists)

set(MAN_PAGE "${NAME}.8")
set(MAN_PATH "${CMAKE_BINARY_DIR}/man8")
set(MANUAL "${MAN_PATH}/${MAN_PAGE}")

# set target
add_executable("${NAME}" "${NAME}.c" aux.c display.c net.c poll.c report.c)
target_include_directories("${NAME}" PRIVATE "${CMAKE_CURRENT_BINARY_DIR}")
target_compile_options("${NAME}" PRIVATE -Wall)

# options
set(OPTION_LIST)
option(CAP     "With linux capabilities"    ON)
option(CURSES  "[N]Curses built version"    ON)
option(UNICODE "Unicode support"            ON)
option(DNS     "DNS support"                ON)
option(IDN     "IDN support"                ON)
option(IPINFO  "IPINFO support"             ON)
option(SPLIT   "SPLIT mode support"         ON)
option(GRAPH   "With XCB/Xlib cairo graphs" OFF)
option(IPV6    "IPv6 support"               ON)
option(MPLS    "MPLS decoding"              ON)
set(OPTION_OUTFMT)
option(OUTRAW  "Output raw format"  OFF)
option(OUTTXT  "Output text format" ON)
option(OUTCSV  "Output csv format"  ON)
option(OUTJSON "Output json format" ON)
option(OUTXML  "Output xml format"  OFF)
set(OPTION_DEBLOG)
option(DEBPOLL   "Debug poll syslog"   OFF)
option(DEBNET    "Debug net syslog"    OFF)
option(DEBDNS    "Debug dns syslog"    OFF)
option(DEBIPINFO "Debug ipinfo syslog" OFF)
set(MAN_EXCL)
option(SBIN "Install to sbin" OFF)

if(CAP OR CURSES OR IDN OR GRAPH)
  find_package(PkgConfig REQUIRED)
endif()

if(CAP)
  pkg_check_modules(CAP REQUIRED IMPORTED_TARGET libcap)
  target_link_libraries("${NAME}" PRIVATE PkgConfig::CAP)
  list(APPEND OPTION_LIST "+CAP")
  set(LIBCAP 1)
else()
  list(APPEND OPTION_LIST "-CAP")
endif()

if(CURSES)
  set(_curses_fn use_default_colors)
  set(_curses_lib ncursesw)
  check_library_exists("${_curses_lib}" "${_curses_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_CFN_IN_NCW)
  if(NOT HAVE_CFN_IN_NCW)
    set(_curses_lib curses)
    check_library_exists(${_curses_lib} "${_curses_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_CFN_IN_SYS)
    if(NOT HAVE_CFN_IN_SYS)
      set(_curses_lib ncurses)
      check_library_exists(${_curses_lib} "${_curses_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_CFN_IN_NC)
      if(NOT HAVE_CFN_IN_NC)
        message(FATAL_ERROR "CURSES is enabled, but no suitable library found")
      endif()
    endif()
  endif()
  set(HAVE_USE_DEFAULT_COLORS 1)
  target_link_libraries("${NAME}" PRIVATE -l${_curses_lib})
  check_include_file("ncursesw/ncurses.h" HAVE_NCURSESW_NCURSES_H)
  check_include_file("ncursesw/curses.h" HAVE_NCURSESW_CURSES_H)
  check_include_file("ncurses/ncurses.h" HAVE_NCURSES_NCURSES_H)
  check_include_file("ncurses/curses.h" HAVE_NCURSES_CURSES_H)
  check_include_file("ncurses.h" HAVE_NCURSES_H)
  check_include_file("curses.h" HAVE_CURSES_H)
  if(UNICODE)
    set(_curses_wfn add_wch)
    check_library_exists("${_curses_lib}" "${_curses_wfn}" "${CMAKE_LIBRARY_PATH}" HAVE_WCH_IN_CURSES)
    if(NOT HAVE_WCH_IN_CURSES)
      message(FATAL_ERROR "UNICODE is enabled, but no wchar library found")
    endif()
  endif()
  target_sources("${NAME}" PRIVATE curses.c)
  list(APPEND OPTION_LIST "+CURSES")
  set(CURSESMODE 1)
else()
  list(APPEND OPTION_LIST "-CURSES")
endif()

if(UNICODE)
  check_include_file("wchar.h" HAVE_WCHAR_H)
  check_include_file("wctype.h" HAVE_WCTYPE_H)
  check_include_file("locale.h" HAVE_LOCALE_H)
  check_include_file("langinfo.h" HAVE_LANGINFO_H)
  list(APPEND OPTION_LIST "+UNICODE")
  set(WITH_UNICODE 1)
else()
  list(APPEND OPTION_LIST "-UNICODE")
endif()

if(DNS)
  set(_res_fn res_mkquery)
  set(_res_lib c)
  check_library_exists("${_res_lib}" "${_res_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_RES_IN_C)
  if(NOT HAVE_RES_IN_C)
    set(_res_lib resolv)
    check_library_exists("${_res_lib}" "${_res_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_RES_IN_RES)
    if(NOT HAVE_RES_IN_RES)
      check_library_exists("${_res_lib}" "__${_res_fn}" "${CMAKE_LIBRARY_PATH}" HAVE___RES_IN_C)
      if(NOT HAVE___RES_IN_C)
        set(_res_lib network)
        check_library_exists("${_res_lib}" "__${_res_fn}" "${CMAKE_LIBRARY_PATH}" HAVE___RES_IN_NET)
        if(NOT HAVE___RES_IN_NET)
          message(WARNING "DNS is enabled, but resolver is not detected: suppose it's present in libc")
          set(_res_lib c)
        endif()
      endif()
    endif()
    target_link_libraries("${NAME}" PRIVATE -l${_res_lib})
  endif()
  set(_res_fn res_nmkquery)
  check_function_exists("${_res_fn}" HAVE_RES_NMKQUERY)
  if(NOT HAVE_RES_NMKQUERY)
    check_library_exists("${_res_lib}" "__${_res_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_RES___NMKQUERY)
    if(HAVE_RES___NMKQUERY)
      set(HAVE_RES_NMKQUERY 1)
    endif()
  endif()
  set(_nsl_fn gethostbyaddr)
  check_library_exists(c "${_nsl_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_NSL_IN_C)
  if(NOT HAVE_NSL_IN_C)
    check_library_exists(nsl "${_nsl_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_NSL_IN_NSL)
    if(HAVE_NSL_IN_NSL)
      target_link_libraries("${NAME}" PRIVATE -lnsl)
    else()
      check_library_exists("${_res_lib}" "${_nsl_fn}" "${CMAKE_LIBRARY_PATH}" HAVE_NSL_IN_RES)
      if(NOT HAVE_NSL_IN_RES)
        message(FATAL_ERROR "DNS is enabled, but NSL not found")
      endif()
    endif()
  endif()
  check_include_file("arpa/nameser.h" HAVE_ARPA_NAMESER_H)
  check_include_file("netinet/in.h" HAVE_NETINET_IN_H)
  check_include_file("netdb.h" HAVE_NETDB_H)
  check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
  target_sources("${NAME}" PRIVATE dns.c)
  list(APPEND OPTION_LIST "+DNS")
  set(ENABLE_DNS 1)
else()
  list(APPEND OPTION_LIST "-DNS")
  list(APPEND MAN_EXCL n)
endif()

if(IDN)
  pkg_check_modules(IDN IMPORTED_TARGET libidn2)
  if(IDN_FOUND)
    set(LIBIDN2 1)
  else()
    pkg_check_modules(IDN REQUIRED IMPORTED_TARGET libidn)
    set(LIBIDN 1)
  endif()
  target_link_libraries("${NAME}" PRIVATE PkgConfig::IDN)
  list(APPEND OPTION_LIST "+IDN")
else()
  list(APPEND OPTION_LIST "-IDN")
endif()

if(IPINFO)
  target_sources("${NAME}" PRIVATE ipinfo.c)
  list(APPEND OPTION_LIST "+IPINFO")
  set(WITH_IPINFO 1)
else()
  list(APPEND OPTION_LIST "-IPINFO")
  list(APPEND MAN_EXCL y)
endif()

if(SPLIT)
  target_sources("${NAME}" PRIVATE split.c)
  list(APPEND OPTION_LIST "+SPLIT")
  set(SPLITMODE 1)
else()
  list(APPEND OPTION_LIST "-SPLIT")
  list(APPEND MAN_EXCL p)
endif()

if(GRAPH)
  set(GRNAME "graphcairo")
  set(GRBASE "${GRNAME}/${GRNAME}")
  target_include_directories("${NAME}" PRIVATE "${CMAKE_SOURCE_DIR}" "${GRNAME}")
  pkg_check_modules(CAIROPANGO REQUIRED IMPORTED_TARGET cairo pango pangocairo)
  target_link_libraries("${NAME}" PRIVATE PkgConfig::CAIROPANGO)
  pkg_check_modules(XGRAPH IMPORTED_TARGET xcb)
  if(XGRAPH_FOUND)
    pkg_check_modules(KEYSYM REQUIRED IMPORTED_TARGET "xcb-keysyms")
    target_link_libraries("${NAME}" PRIVATE PkgConfig::KEYSYM)
    target_sources("${NAME}" PRIVATE "${GRBASE}.c" "${GRBASE}-${NAME}.c" "${GRBASE}-xcb.c")
  else()
    pkg_check_modules(XGRAPH REQUIRED IMPORTED_TARGET x11)
    target_sources("${NAME}" PRIVATE "${GRBASE}.c" "${GRBASE}-${NAME}.c" "${GRBASE}-x11.c")
  endif()
  target_link_libraries("${NAME}" PRIVATE PkgConfig::XGRAPH)
  set(CMAKE_REQUIRED_LIBRARIES fontconfig)
  check_function_exists(FcFini FC_FINI)
  list(APPEND OPTION_LIST "+GRAPH")
  set(GRAPHMODE 1)
else()
  list(APPEND OPTION_LIST "-GRAPH")
  list(APPEND MAN_EXCL g)
endif()

if(IPV6)
  list(APPEND OPTION_LIST "+IPV6")
  set(ENABLE_IPV6 1)
else()
  list(APPEND OPTION_LIST "-IPV6")
  list(APPEND MAN_EXCL 4 6)
endif()

if(MPLS)
  list(APPEND OPTION_LIST "+MPLS")
  set(WITH_MPLS 1)
else()
  list(APPEND OPTION_LIST "-MPLS")
  list(APPEND MAN_EXCL e)
endif()

if(OUTTXT)
  list(APPEND OPTION_OUTFMT "text")
  set(OUTPUT_FORMAT_TXT 1)
else()
  list(APPEND MAN_EXCL ot)
endif()
if(OUTCSV)
  list(APPEND OPTION_OUTFMT "csv")
  set(OUTPUT_FORMAT_CSV 1)
else()
  list(APPEND MAN_EXCL oc)
endif()
if(OUTJSON)
  list(APPEND OPTION_OUTFMT "json")
  set(OUTPUT_FORMAT_JSON 1)
else()
  list(APPEND MAN_EXCL oj)
endif()
if(OUTRAW)
  list(APPEND OPTION_OUTFMT "raw")
  set(OUTPUT_FORMAT_RAW 1)
else()
  list(APPEND MAN_EXCL or)
endif()
if(OUTXML)
  list(APPEND OPTION_OUTFMT "xml")
  set(OUTPUT_FORMAT_XML 1)
else()
  list(APPEND MAN_EXCL ox)
endif()
if(NOT OPTION_OUTFMT)
  list(APPEND MAN_EXCL o)
endif()

if(DEBPOLL)
  list(APPEND OPTION_DEBLOG "poll")
  set(LOG_POLL 1)
endif()
if(DEBNET)
  list(APPEND OPTION_DEBLOG "net")
  set(LOG_NET 1)
endif()
if(DEBDNS)
  list(APPEND OPTION_DEBLOG "dns")
  set(LOG_DNS 1)
endif()
if(DEBIPINFO)
  list(APPEND OPTION_DEBLOG "ipinfo")
  set(LOG_IPINFO 1)
endif()


# misc aux checkouts
check_include_file("sys/param.h" HAVE_SYS_PARAM_H)
#
check_library_exists(c pow "${CMAKE_LIBRARY_PATH}" HAVE_POW_IN_C)
if(NOT HAVE_POW_IN_C)
  check_library_exists(m pow "${CMAKE_LIBRARY_PATH}" HAVE_POW_IN_M)
  if(NOT HAVE_POW_IN_M)
    message(FATAL_ERROR "No suitable math library found")
  endif()
  target_link_libraries("${NAME}" PRIVATE -lm)
endif()
#
check_library_exists(c warnx "${CMAKE_LIBRARY_PATH}" HAVE_WARNX_IN_C)
if(NOT HAVE_WARNX_IN_C)
  check_library_exists(bsd warnx "${CMAKE_LIBRARY_PATH}" HAVE_WARNX_IN_BSD)
  if(HAVE_WARNX_IN_BSD)
    target_link_libraries("${NAME}" PRIVATE -lbsd)
  else()
    message(FATAL_ERROR "No warnx library found")
  endif()
endif()
#
check_library_exists(c socket "${CMAKE_LIBRARY_PATH}" HAVE_SOCKET_IN_C)
if(NOT HAVE_SOCKET_IN_C)
  check_library_exists(socket socket "${CMAKE_LIBRARY_PATH}" HAVE_SOCKET_IN_SOCKET)
  if(HAVE_SOCKET_IN_SOCKET)
    target_link_libraries("${NAME}" PRIVATE -lsocket)
  else()
    check_library_exists(network socket "${CMAKE_LIBRARY_PATH}" HAVE_SOCKET_IN_NETWORK)
    if(HAVE_SOCKET_IN_NETWORK)
      target_link_libraries("${NAME}" PRIVATE -lnetwork)
    else()
      message(FATAL_ERROR "No socket library found")
    endif()
  endif()
endif()
#
check_library_exists(c arc4random_uniform "${CMAKE_LIBRARY_PATH}" HAVE_ARC4RANDOM_UNIFORM)
if(NOT HAVE_ARC4RANDOM_UNIFORM)
  check_include_file("bsd/stdlib.h" HAVE_BSD_STDLIB_H)
  check_library_exists(bsd arc4random_uniform "${CMAKE_LIBRARY_PATH}" HAVE_BSD_ARC4RANDOM_UNIFORM)
  if(HAVE_BSD_ARC4RANDOM_UNIFORM)
    set(HAVE_ARC4RANDOM_UNIFORM 1)
    target_link_libraries("${NAME}" PRIVATE -lbsd)
  endif()
endif()


# exclude unset options from man page
file(MAKE_DIRECTORY "${MAN_PATH}")
configure_file("${MAN_PAGE}.in" "${MANUAL}" COPYONLY)
if(MAN_EXCL)
  file(READ "${MANUAL}" MAN_CONTENT)
  foreach(excl IN LISTS MAN_EXCL)
    string(REGEX REPLACE "\(\.ds o${excl} \"\)[^\n]*" "\\1" MAN_CONTENT ${MAN_CONTENT})
  endforeach()
  file(WRITE "${MANUAL}" ${MAN_CONTENT})
endif()

# fin
if(OPTION_OUTFMT)
  list(JOIN OPTION_OUTFMT "," OPTION_OUTFMT)
  list(APPEND OPTION_LIST "OUTFMT=${OPTION_OUTFMT}")
else()
  list(APPEND OPTION_LIST "-OUTFMT")
  set(OPTION_OUTFMT OFF)
endif()
if(OPTION_DEBLOG)
  list(JOIN OPTION_DEBLOG "," OPTION_DEBLOG)
  list(APPEND OPTION_LIST "DEBLOG=${OPTION_DEBLOG}")
else()
  list(APPEND OPTION_LIST "-DEBLOG")
  set(OPTION_DEBLOG OFF)
endif()
list(JOIN OPTION_LIST " " OPTION_LIST)
set(BUILD_OPTIONS "${OPTION_LIST}")
configure_file(config.h.cmake config.h @ONLY)

message("")
message(STATUS "CAP     ${CAP}\t: Linux capabilities")
message(STATUS "CURSES  ${CURSES}\t: Terminal interface")
message(STATUS "UNICODE ${UNICODE}\t: International encoding")
message(STATUS "DNS     ${DNS}\t: Hostname / IP-address resolver")
message(STATUS "IDN     ${IDN}\t: International characters in domain names")
message(STATUS "IPINFO  ${IPINFO}\t: Extra information on IP-address")
message(STATUS "SPLIT   ${SPLIT}\t: Split-out format")
message(STATUS "GRAPH   ${GRAPH}\t: XCB/Xlib cairo graphs")
message(STATUS "IPV6    ${IPV6}\t: IPv6 support")
message(STATUS "MPLS    ${MPLS}\t: MPLS decoding")
message(STATUS "OUTFMT  ${OPTION_OUTFMT}\t: plain output formats")
message(STATUS "DEBLOG  ${OPTION_DEBLOG}\t: debug via syslog")
message("")


# install
set(EXECDIR "${CMAKE_INSTALL_BINDIR}") # with cap_net_raw
if(SBIN)
  set(EXECDIR "${CMAKE_INSTALL_SBINDIR}")
endif()
install(TARGETS "${NAME}" DESTINATION "${EXECDIR}")

if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.14.0")
  install(DIRECTORY "${MAN_PATH}" TYPE MAN)
else()
  install(DIRECTORY "${MAN_PATH}" DESTINATION ${CMAKE_INSTALL_MANDIR})
endif()

if(CAP)
  find_program(SETCAP setcap)
  set(EXECCAPS "cap_net_raw+ep")
  set(EXECFILE "${CMAKE_INSTALL_PREFIX}/${EXECDIR}/${NAME}")
  if(SETCAP)
    message(STATUS "Caps for '${EXECDIR}/${NAME}': ${EXECCAPS}")
    install(CODE "execute_process(COMMAND ${SETCAP} ${EXECCAPS} \$ENV{DESTDIR}${EXECFILE})")
  else()
    message(STATUS "NOTE: to run '${EXECFILE}' it needs raw socket permissions")
  endif()
  message("")
endif()

